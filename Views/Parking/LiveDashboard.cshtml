@model ParkIRC.ViewModels.LiveDashboardViewModel
@{
    ViewData["Title"] = "Live Dashboard";
}

@section Styles {
    <link rel="stylesheet" href="~/css/live-dashboard.css" />
    <style>
        .action-card {
            transition: all 0.3s ease;
        }
        .action-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        .recent-activity {
            max-height: 400px;
            overflow-y: auto;
        }
        .stats-card {
            border-left: 4px solid;
        }
        .stats-card.primary { border-color: #4e73df; }
        .stats-card.success { border-color: #1cc88a; }
        .stats-card.warning { border-color: #f6c23e; }
        .stats-card.danger { border-color: #e74a3b; }
    </style>
}

<div class="container-fluid mt-4">
    <!-- Quick Actions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="action-card card h-100 bg-success text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-car-side fa-3x mb-3"></i>
                                    <h5>Kendaraan Masuk</h5>
                                    <button class="btn btn-light mt-2" onclick="showVehicleEntryModal()">
                                        <i class="fas fa-plus"></i> Catat Masuk
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="action-card card h-100 bg-danger text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-car fa-3x mb-3"></i>
                                    <h5>Kendaraan Keluar</h5>
                                    <button class="btn btn-light mt-2" onclick="showVehicleExitModal()">
                                        <i class="fas fa-minus"></i> Catat Keluar
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="action-card card h-100 bg-info text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-history fa-3x mb-3"></i>
                                    <h5>Riwayat</h5>
                                    <button class="btn btn-light mt-2" onclick="showHistoryModal()">
                                        <i class="fas fa-search"></i> Lihat Riwayat
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="action-card card h-100 bg-warning text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-print fa-3x mb-3"></i>
                                    <h5>Cetak Laporan</h5>
                                    <button class="btn btn-light mt-2" onclick="showReportModal()">
                                        <i class="fas fa-file-pdf"></i> Cetak
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <div class="card stats-card primary h-100">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-primary mb-2">Total Spaces</h6>
                            <h2 class="mb-0 total-spaces">@Model.TotalSpaces</h2>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-parking fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card success h-100">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-success mb-2">Available</h6>
                            <h2 class="mb-0 available-spaces">@Model.AvailableSpaces</h2>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card warning h-100">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-warning mb-2">Occupied</h6>
                            <h2 class="mb-0 occupied-spaces">@Model.OccupiedSpaces</h2>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-car fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card danger h-100">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-danger mb-2">Today's Revenue</h6>
                            <h2 class="mb-0 today-revenue">Rp @Model.TodayRevenue.ToString("N0")</h2>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-money-bill-wave fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Recent Activities -->
        <div class="col-md-8 mb-4">
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Recent Activities</h5>
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-outline-primary active" onclick="filterActivities('all')">All</button>
                        <button type="button" class="btn btn-sm btn-outline-success" onclick="filterActivities('entry')">Entry</button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="filterActivities('exit')">Exit</button>
                    </div>
                </div>
                <div class="card-body recent-activity">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Time</th>
                                    <th>Vehicle</th>
                                    <th>Type</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="activityTableBody">
                                @foreach (var activity in Model.RecentActivities)
                                {
                                    <tr>
                                        <td>@activity.EntryTime.ToString("HH:mm")</td>
                                        <td>@activity.Vehicle?.VehicleNumber</td>
                                        <td>@activity.Vehicle?.VehicleType</td>
                                        <td>
                                            @if (activity.ExitTime != default(DateTime))
                                            {
                                                <span class="badge bg-danger">Exit</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">Entry</span>
                                            }
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-info" onclick="viewDetails('@activity.Vehicle?.VehicleNumber')">
                                                <i class="fas fa-info-circle"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    @{
                        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
                        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
                    }

                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div class="text-muted">
                            Showing @(((Model.CurrentPage - 1) * Model.PageSize) + 1) to @(Math.Min(Model.CurrentPage * Model.PageSize, Model.RecentActivities.TotalItems)) 
                            of @Model.RecentActivities.TotalItems entries
                        </div>
                        <nav aria-label="Page navigation">
                            <ul class="pagination mb-0">
                                <li class="page-item @prevDisabled">
                                    <a class="page-link" href="@Url.Action("LiveDashboard", new { pageNumber = Model.CurrentPage - 1 })" 
                                       tabindex="-1" aria-disabled="@(Model.HasPreviousPage ? "false" : "true")">Previous</a>
                                </li>
                                @for (int i = 1; i <= Model.TotalPages; i++)
                                {
                                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("LiveDashboard", new { pageNumber = i })">@i</a>
                                    </li>
                                }
                                <li class="page-item @nextDisabled">
                                    <a class="page-link" href="@Url.Action("LiveDashboard", new { pageNumber = Model.CurrentPage + 1 })"
                                       aria-disabled="@(Model.HasNextPage ? "false" : "true")">Next</a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>

        <!-- Vehicle Distribution -->
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="mb-0">Vehicle Distribution</h5>
                </div>
                <div class="card-body">
                    <canvas id="vehicleDistributionChart"></canvas>
                    <div class="table-responsive mt-3">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>Count</th>
                                    <th>%</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.VehicleDistribution)
                                {
                                    var percentage = Model.OccupiedSpaces > 0 
                                        ? (item.Count * 100.0 / Model.OccupiedSpaces).ToString("N1") 
                                        : "0";
                                    <tr>
                                        <td>@item.VehicleType</td>
                                        <td>@item.Count</td>
                                        <td>@percentage%</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modals -->
@await Html.PartialAsync("_VehicleEntryModal", new ParkIRC.ViewModels.VehicleEntryViewModel())
@await Html.PartialAsync("_VehicleExitModal", new ParkIRC.ViewModels.VehicleExitViewModel())
@await Html.PartialAsync("_HistoryModal", new ParkIRC.ViewModels.HistoryViewModel())
@await Html.PartialAsync("_ReportModal", new ParkIRC.ViewModels.ReportViewModel())

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/parkingHub")
            .withAutomaticReconnect()
            .build();

        // Initialize modals
        const vehicleEntryModal = new bootstrap.Modal(document.getElementById('vehicleEntryModal'));
        const vehicleExitModal = new bootstrap.Modal(document.getElementById('vehicleExitModal'));
        const historyModal = new bootstrap.Modal(document.getElementById('historyModal'));
        const reportModal = new bootstrap.Modal(document.getElementById('reportModal'));

        // Handle vehicle entry form submission
        function handleVehicleEntrySubmit(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const vehicleNumber = formData.get('VehicleNumber');
            
            // Validate form
            if (!vehicleNumber) {
                alert('Nomor kendaraan wajib diisi');
                return false;
            }

            // Show loading
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Menyimpan...';

            // Send request
            fetch('/Parking/VehicleEntry', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close modal
                    vehicleEntryModal.hide();
                    
                    // Show success message
                    showToast('success', data.message);
                    
                    // Reset form
                    event.target.reset();
                } else {
                    showToast('error', data.message);
                }
            })
            .catch(error => {
                showToast('error', 'Terjadi kesalahan saat mencatat kendaraan');
            })
            .finally(() => {
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            });

            return false;
        }

        // Handle vehicle exit form submission
        function handleVehicleExitSubmit(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const vehicleNumber = formData.get('VehicleNumber');
            
            // Validate form
            if (!vehicleNumber) {
                alert('Nomor kendaraan wajib diisi');
                return false;
            }

            // Show loading
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Menyimpan...';

            // Send request
            fetch('/Parking/VehicleExit', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close modal
                    vehicleExitModal.hide();
                    
                    // Show success message
                    showToast('success', data.message);
                    
                    // Reset form
                    event.target.reset();
                } else {
                    showToast('error', data.message);
                }
            })
            .catch(error => {
                showToast('error', 'Terjadi kesalahan saat mencatat keluar kendaraan');
            })
            .finally(() => {
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            });

            return false;
        }

        // Load history
        function loadHistory() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const vehicleNumber = document.getElementById('vehicleNumber').value;
            const page = 1;
            const pageSize = 10;

            fetch(`/Parking/GetVehicleHistory?StartDate=${startDate}&EndDate=${endDate}&VehicleNumber=${vehicleNumber}&Page=${page}&PageSize=${pageSize}`)
                .then(response => response.json())
                .then(data => {
                    populateHistoryTable(data.data);
                    updatePagination(data.totalPages);
                })
                .catch(error => {
                    showToast('error', 'Terjadi kesalahan saat mengambil riwayat');
                });
        }

        // Populate history table
        function populateHistoryTable(transactions) {
            const tbody = document.getElementById('historyTableBody');
            tbody.innerHTML = transactions.map(transaction => `
                <tr>
                    <td>${transaction.transactionNumber}</td>
                    <td>${transaction.vehicleNumber}</td>
                    <td>${transaction.vehicleType}</td>
                    <td>${transaction.entryTime}</td>
                    <td>${transaction.exitTime}</td>
                    <td>${transaction.duration}</td>
                    <td>Rp ${transaction.amount.toLocaleString()}</td>
                    <td>${transaction.paymentMethod}</td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="printReceipt('${transaction.transactionNumber}')">
                            <i class="fas fa-print"></i> Cetak
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        // Update pagination
        function updatePagination(totalPages) {
            // Implement pagination UI update here
        }

        // Print receipt
        function printReceipt(transactionNumber) {
            // Implement receipt printing logic here
        }

        // Handle report form submission
        function handleReportSubmit(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const reportType = formData.get('reportType');
            
            // Validate form
            if (!reportType) {
                alert('Tipe laporan wajib dipilih');
                return false;
            }

            // Show loading
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Mencetak...';

            // Send request
            fetch('/Parking/GenerateReport', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error generating report');
                }
                return response.blob();
            })
            .then(blob => {
                // Create download link
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'ParkingReport.pdf';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);

                // Close modal
                reportModal.hide();
            })
            .catch(error => {
                showToast('error', 'Terjadi kesalahan saat mencetak laporan');
            })
            .finally(() => {
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            });

            return false;
        }

        // Show toast notification
        function showToast(type, message) {
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.role = 'alert';
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;

            document.body.appendChild(toast);
            
            const bsToast = new bootstrap.Toast(toast, {
                autohide: true,
                delay: 3000
            });
            
            bsToast.show();
        }

        // Get anti-forgery token
        function getAntiForgeryToken() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token ? token.value : '';
        }

        // Initialize SignalR
        connection.start()
            .then(() => {
                console.log('SignalR connected');
            })
            .catch(err => {
                console.error('SignalR connection error: ' + err);
            });

        // Handle dashboard updates
        connection.on('UpdateDashboard', (data) => {
            updateStats(data);
            updateVehicleDistribution(data.vehicleDistribution);
            updateRecentActivities(data.recentActivities);
        });

        // Update stats
        function updateStats(data) {
            document.querySelector('.total-spaces').textContent = data.totalSpaces;
            document.querySelector('.available-spaces').textContent = data.availableSpaces;
            document.querySelector('.occupied-spaces').textContent = data.occupiedSpaces;
            document.querySelector('.today-revenue').textContent = data.todayRevenue.toFixed(2);
        }

        // Update vehicle distribution chart
        function updateVehicleDistribution(distribution) {
            vehicleChart.data.labels = distribution.map(d => d.type);
            vehicleChart.data.datasets[0].data = distribution.map(d => d.count);
            vehicleChart.update();
        }

        // Update recent activities
        function updateRecentActivities(activities) {
            const activitiesList = document.querySelector('.recent-activities');
            activitiesList.innerHTML = activities.map(activity => `
                <div class="activity-item">
                    <div class="activity-time">${activity.time}</div>
                    <div class="activity-content">
                        <span class="vehicle-number">${activity.vehicleNumber}</span>
                        <span class="vehicle-type">${activity.vehicleType}</span>
                    </div>
                </div>
            `).join('');
        }

        // Show modals
        function showVehicleEntryModal() {
            vehicleEntryModal.show();
        }

        function showVehicleExitModal() {
            vehicleExitModal.show();
        }

        function showHistoryModal() {
            historyModal.show();
        }

        function showReportModal() {
            reportModal.show();
        }

        // Handle report type change
        document.getElementById('reportType').addEventListener('change', function() {
            const customDateRange = document.getElementById('customDateRange');
            if (this.value === 'Custom') {
                customDateRange.style.display = 'block';
            } else {
                customDateRange.style.display = 'none';
            }
        });

        // Add CSRF token to forms
        document.querySelectorAll('form').forEach(form => {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (token) {
                form.append(token.cloneNode());
            }
        });
    </script>
} 