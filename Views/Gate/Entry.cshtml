@{
    ViewData["Title"] = "Gate Entry";
}

@section Styles {
    <link rel="stylesheet" href="~/css/gate-entry.css" />
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">Kamera</h6>
                    <div class="d-flex align-items-center">
                        <div class="form-check form-switch me-3">
                            <input class="form-check-input" type="checkbox" id="roiSwitch" checked>
                            <label class="form-check-label" for="roiSwitch">Area Deteksi</label>
                        </div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="autoTriggerSwitch" checked>
                            <label class="form-check-label" for="autoTriggerSwitch">Trigger Otomatis</label>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="camera-wrapper position-relative">
                        <video id="camera" autoplay playsinline></video>
                        <div id="roiOverlay" class="roi-overlay">
                            <div id="roiBox" class="roi-box"></div>
                            <div class="roi-handle top-left"></div>
                            <div class="roi-handle top-right"></div>
                            <div class="roi-handle bottom-left"></div>
                            <div class="roi-handle bottom-right"></div>
                        </div>
                        <div id="motionStatus" class="motion-status">
                            <span class="badge bg-secondary">Tidak Ada Gerakan</span>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button id="captureBtn" class="btn btn-primary">
                            <i class="fas fa-camera me-2"></i>Ambil Foto
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Preview Gambar Terakhir -->
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Preview Gambar Terakhir</h6>
                </div>
                <div class="card-body">
                    <div id="lastCaptureWrapper" class="text-center">
                        <img id="lastCapture" class="img-fluid mb-3 d-none" alt="Gambar terakhir">
                        <p id="noCaptureText" class="text-muted">Belum ada gambar yang diambil</p>
                    </div>
                    <div class="capture-info mt-3 d-none">
                        <p class="mb-2"><strong>Waktu Capture:</strong> <span id="captureTime"></span></p>
                        <p class="mb-0"><strong>Status:</strong> <span id="captureStatus" class="badge bg-success">Berhasil</span></p>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Data Kendaraan</h6>
                </div>
                <div class="card-body">
                    <form id="vehicleEntryForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="vehicleNumber" class="form-label">Nomor Kendaraan <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="vehicleNumber" name="vehicleNumber" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="vehicleType" class="form-label">Jenis Kendaraan <span class="text-danger">*</span></label>
                                    <select class="form-select" id="vehicleType" name="vehicleType" required>
                                        <option value="">Pilih Jenis Kendaraan</option>
                                        <option value="Motorcycle">Motor</option>
                                        <option value="Car">Mobil</option>
                                        <option value="Truck">Truk</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="driverName" class="form-label">Nama Pengemudi</label>
                                    <input type="text" class="form-control" id="driverName" name="driverName">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="phoneNumber" class="form-label">Nomor Telepon</label>
                                    <input type="tel" class="form-control" id="phoneNumber" name="phoneNumber">
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-save me-2"></i>Simpan
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" style="display: none;">
    <div class="content-wrapper">
        <div class="spinner-border text-light mb-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <h5 class="text-light mb-3" id="loadingText">Memproses...</h5>
        <div class="progress mb-3">
            <div class="progress-bar" role="progressbar" style="width: 0%"></div>
        </div>
        <p class="text-light" id="timeoutText" style="display: none;">
            Waktu pemrosesan lebih lama dari biasanya. Mohon tunggu...
        </p>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let stream;
        let motionDetectionActive = true;
        let roiActive = true;
        let lastImageData;
        let motionDetectionInterval;
        let motionThreshold = 30; // Threshold untuk deteksi gerakan
        let motionSensitivity = 20; // Persentase piksel yang harus berubah untuk dianggap sebagai gerakan
        let consecutiveDetections = 0; // Jumlah deteksi berturut-turut
        let requiredConsecutiveDetections = 2; // Jumlah deteksi berturut-turut yang diperlukan untuk trigger
        let cooldownActive = false; // Cooldown setelah capture
        
        // ROI (Region of Interest) settings
        let roi = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
        };
        
        const video = document.getElementById('camera');
        const canvas = document.getElementById('canvas');
        const motionCanvas = document.getElementById('motionCanvas');
        const captureBtn = document.getElementById('captureBtn');
        const submitBtn = document.getElementById('submitBtn');
        const base64Image = document.getElementById('base64Image');
        const entryForm = document.getElementById('entryForm');
        const loadingOverlay = document.getElementById('loadingOverlay');
        const loadingText = document.getElementById('loadingText');
        const timeoutText = document.getElementById('timeoutText');
        const vehicleNumberInput = document.getElementById('vehicleNumber');
        const autoTriggerSwitch = document.getElementById('autoTriggerSwitch');
        const roiSwitch = document.getElementById('roiSwitch');
        const motionStatus = document.getElementById('motionStatus');
        const roiOverlay = document.getElementById('roiOverlay');
        const roiBox = document.getElementById('roiBox');
        const resetRoiBtn = document.getElementById('resetRoiBtn');
        const sensitivityRange = document.getElementById('sensitivityRange');
        const sensitivityValue = document.getElementById('sensitivityValue');
        let lastCaptureData = null;
        
        // Start camera when page loads
        document.addEventListener('DOMContentLoaded', () => {
            startCamera();
            
            // Inisialisasi status deteksi gerakan berdasarkan switch
            updateMotionDetection(autoTriggerSwitch.checked);
            updateRoiVisibility(roiSwitch.checked);
            
            // Event listener untuk switch trigger otomatis
            autoTriggerSwitch.addEventListener('change', (e) => {
                updateMotionDetection(e.target.checked);
            });
            
            // Event listener untuk switch ROI
            roiSwitch.addEventListener('change', (e) => {
                updateRoiVisibility(e.target.checked);
            });
            
            // Event listener untuk slider sensitivitas
            sensitivityRange.addEventListener('input', (e) => {
                motionSensitivity = parseInt(e.target.value);
                sensitivityValue.textContent = motionSensitivity;
            });
            
            // Event listener untuk reset ROI button
            resetRoiBtn.addEventListener('click', resetRoi);
            
            // Setup ROI drag functionality
            setupRoiDrag();
        });

        // Clean up camera when page unloads
        window.addEventListener('beforeunload', () => {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
            }
            if (motionDetectionInterval) {
                clearInterval(motionDetectionInterval);
            }
        });

        // Start camera
        async function startCamera() {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        width: 1280,
                        height: 720,
                        facingMode: "environment"
                    } 
                });
                video.srcObject = stream;
                video.play();
                
                // Tunggu video siap
                video.onloadedmetadata = () => {
                    // Inisialisasi canvas untuk deteksi gerakan
                    motionCanvas.width = video.videoWidth;
                    motionCanvas.height = video.videoHeight;
                    
                    // Inisialisasi ROI default (70% dari ukuran video di tengah)
                    initializeRoi();
                };
            } catch (err) {
                console.error('Error accessing camera:', err);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Tidak dapat mengakses kamera. Pastikan kamera tersedia dan izin diberikan.'
                });
            }
        }
        
        // Initialize ROI with default values
        function initializeRoi() {
            const videoWidth = video.videoWidth;
            const videoHeight = video.videoHeight;
            
            // Set ROI to 70% of video size, centered
            roi.width = Math.round(videoWidth * 0.7);
            roi.height = Math.round(videoHeight * 0.7);
            roi.x = Math.round((videoWidth - roi.width) / 2);
            roi.y = Math.round((videoHeight - roi.height) / 2);
            
            // Update ROI box position
            updateRoiBoxPosition();
        }
        
        // Reset ROI to default
        function resetRoi() {
            initializeRoi();
        }
        
        // Update ROI box position based on roi object
        function updateRoiBoxPosition() {
            // Calculate scale factor between actual video dimensions and displayed dimensions
            const videoRect = video.getBoundingClientRect();
            const scaleX = videoRect.width / video.videoWidth;
            const scaleY = videoRect.height / video.videoHeight;
            
            // Apply scaled position to ROI box
            roiBox.style.left = (roi.x * scaleX) + 'px';
            roiBox.style.top = (roi.y * scaleY) + 'px';
            roiBox.style.width = (roi.width * scaleX) + 'px';
            roiBox.style.height = (roi.height * scaleY) + 'px';
            
            // Position handles
            const handles = document.querySelectorAll('.roi-handle');
            handles.forEach(handle => {
                if (handle.classList.contains('top-left')) {
                    handle.style.left = (roi.x * scaleX - 5) + 'px';
                    handle.style.top = (roi.y * scaleY - 5) + 'px';
                } else if (handle.classList.contains('top-right')) {
                    handle.style.left = ((roi.x + roi.width) * scaleX - 5) + 'px';
                    handle.style.top = (roi.y * scaleY - 5) + 'px';
                } else if (handle.classList.contains('bottom-left')) {
                    handle.style.left = (roi.x * scaleX - 5) + 'px';
                    handle.style.top = ((roi.y + roi.height) * scaleY - 5) + 'px';
                } else if (handle.classList.contains('bottom-right')) {
                    handle.style.left = ((roi.x + roi.width) * scaleX - 5) + 'px';
                    handle.style.top = ((roi.y + roi.height) * scaleY - 5) + 'px';
                }
            });
        }
        
        // Setup ROI drag functionality
        function setupRoiDrag() {
            let isDragging = false;
            let isResizing = false;
            let resizeHandle = null;
            let startX, startY;
            let startRoi = { ...roi };
            
            // Handle mousedown on ROI box (for moving)
            roiBox.addEventListener('mousedown', (e) => {
                if (!roiActive) return;
                
                isDragging = true;
                startX = e.clientX;
                startY = e.clientY;
                startRoi = { ...roi };
                e.preventDefault();
            });
            
            // Handle mousedown on resize handles
            document.querySelectorAll('.roi-handle').forEach(handle => {
                handle.addEventListener('mousedown', (e) => {
                    if (!roiActive) return;
                    
                    isResizing = true;
                    resizeHandle = handle;
                    startX = e.clientX;
                    startY = e.clientY;
                    startRoi = { ...roi };
                    e.preventDefault();
                    e.stopPropagation();
                });
            });
            
            // Handle mousemove for both dragging and resizing
            document.addEventListener('mousemove', (e) => {
                if (!roiActive) return;
                if (!isDragging && !isResizing) return;
                
                const videoRect = video.getBoundingClientRect();
                const scaleX = video.videoWidth / videoRect.width;
                const scaleY = video.videoHeight / videoRect.height;
                
                const deltaX = (e.clientX - startX) * scaleX;
                const deltaY = (e.clientY - startY) * scaleY;
                
                if (isDragging) {
                    // Move ROI
                    roi.x = Math.max(0, Math.min(video.videoWidth - roi.width, startRoi.x + deltaX));
                    roi.y = Math.max(0, Math.min(video.videoHeight - roi.height, startRoi.y + deltaY));
                } else if (isResizing) {
                    // Resize ROI based on which handle is being dragged
                    if (resizeHandle.classList.contains('top-left')) {
                        const newWidth = startRoi.width - deltaX;
                        const newHeight = startRoi.height - deltaY;
                        
                        if (newWidth > 50 && newHeight > 50) {
                            roi.x = Math.max(0, Math.min(startRoi.x + startRoi.width - 50, startRoi.x + deltaX));
                            roi.y = Math.max(0, Math.min(startRoi.y + startRoi.height - 50, startRoi.y + deltaY));
                            roi.width = startRoi.width - (roi.x - startRoi.x);
                            roi.height = startRoi.height - (roi.y - startRoi.y);
                        }
                    } else if (resizeHandle.classList.contains('top-right')) {
                        const newWidth = startRoi.width + deltaX;
                        const newHeight = startRoi.height - deltaY;
                        
                        if (newWidth > 50 && newHeight > 50) {
                            roi.y = Math.max(0, Math.min(startRoi.y + startRoi.height - 50, startRoi.y + deltaY));
                            roi.width = Math.max(50, Math.min(video.videoWidth - roi.x, newWidth));
                            roi.height = startRoi.height - (roi.y - startRoi.y);
                        }
                    } else if (resizeHandle.classList.contains('bottom-left')) {
                        const newWidth = startRoi.width - deltaX;
                        const newHeight = startRoi.height + deltaY;
                        
                        if (newWidth > 50 && newHeight > 50) {
                            roi.x = Math.max(0, Math.min(startRoi.x + startRoi.width - 50, startRoi.x + deltaX));
                            roi.width = startRoi.width - (roi.x - startRoi.x);
                            roi.height = Math.max(50, Math.min(video.videoHeight - roi.y, newHeight));
                        }
                    } else if (resizeHandle.classList.contains('bottom-right')) {
                        const newWidth = startRoi.width + deltaX;
                        const newHeight = startRoi.height + deltaY;
                        
                        if (newWidth > 50 && newHeight > 50) {
                            roi.width = Math.max(50, Math.min(video.videoWidth - roi.x, newWidth));
                            roi.height = Math.max(50, Math.min(video.videoHeight - roi.y, newHeight));
                        }
                    }
                }
                
                updateRoiBoxPosition();
            });
            
            // Handle mouseup to stop dragging/resizing
            document.addEventListener('mouseup', () => {
                isDragging = false;
                isResizing = false;
                resizeHandle = null;
            });
            
            // Update ROI position when video is resized
            window.addEventListener('resize', updateRoiBoxPosition);
        }

        // Update status deteksi gerakan
        function updateMotionDetection(isActive) {
            motionDetectionActive = isActive;
            
            if (isActive) {
                motionStatus.textContent = 'Status Deteksi: Aktif';
                motionStatus.classList.remove('bg-secondary');
                motionStatus.classList.add('bg-success');
                startMotionDetection();
            } else {
                motionStatus.textContent = 'Status Deteksi: Tidak Aktif';
                motionStatus.classList.remove('bg-success', 'bg-warning');
                motionStatus.classList.add('bg-secondary');
                stopMotionDetection();
            }
        }
        
        // Update ROI visibility
        function updateRoiVisibility(isVisible) {
            roiActive = isVisible;
            roiOverlay.style.display = isVisible ? 'block' : 'none';
        }

        // Mulai deteksi gerakan
        function startMotionDetection() {
            if (motionDetectionInterval) {
                clearInterval(motionDetectionInterval);
            }
            
            // Ambil frame awal sebagai referensi
            captureFrameForMotionDetection();
            
            // Set interval untuk deteksi gerakan
            motionDetectionInterval = setInterval(() => {
                if (motionDetectionActive && video.readyState === 4 && !cooldownActive) {
                    detectMotion();
                }
            }, 200); // Periksa setiap 200ms untuk responsivitas lebih baik
        }

        // Hentikan deteksi gerakan
        function stopMotionDetection() {
            if (motionDetectionInterval) {
                clearInterval(motionDetectionInterval);
                motionDetectionInterval = null;
            }
            consecutiveDetections = 0;
        }

        // Ambil frame untuk deteksi gerakan
        function captureFrameForMotionDetection() {
            if (video.readyState === 4) {
                const ctx = motionCanvas.getContext('2d');
                ctx.drawImage(video, 0, 0, motionCanvas.width, motionCanvas.height);
                lastImageData = ctx.getImageData(
                    roi.x, roi.y, roi.width, roi.height
                );
            }
        }

        // Deteksi gerakan
        function detectMotion() {
            if (!lastImageData) {
                captureFrameForMotionDetection();
                return;
            }
            
            const ctx = motionCanvas.getContext('2d');
            ctx.drawImage(video, 0, 0, motionCanvas.width, motionCanvas.height);
            const currentImageData = ctx.getImageData(
                roi.x, roi.y, roi.width, roi.height
            );
            
            // Bandingkan data piksel
            const diff = compareImages(lastImageData.data, currentImageData.data);
            
            // Update status deteksi
            motionStatus.textContent = `Deteksi: ${diff.toFixed(1)}% (Threshold: ${motionSensitivity}%)`;
            
            // Jika perubahan melebihi threshold, anggap sebagai gerakan
            if (diff > motionSensitivity) {
                consecutiveDetections++;
                
                // Visual feedback
                motionStatus.classList.remove('bg-success');
                motionStatus.classList.add('bg-warning');
                roiBox.classList.add('motion-detected');
                
                // Jika deteksi berturut-turut mencapai threshold, ambil foto
                if (consecutiveDetections >= requiredConsecutiveDetections) {
                    console.log(`Motion confirmed: ${diff.toFixed(2)}% change after ${consecutiveDetections} consecutive detections`);
                    motionStatus.textContent = `Kendaraan Terdeteksi: ${diff.toFixed(1)}%`;
                    
                    // Ambil foto otomatis
                    capturePhoto();
                    
                    // Reset deteksi dan aktifkan cooldown
                    consecutiveDetections = 0;
                    cooldownActive = true;
                    
                    // Reset deteksi gerakan setelah trigger
                    setTimeout(() => {
                        if (motionDetectionActive) {
                            motionStatus.textContent = 'Status Deteksi: Aktif';
                            motionStatus.classList.remove('bg-warning');
                            motionStatus.classList.add('bg-success');
                            roiBox.classList.remove('motion-detected');
                            captureFrameForMotionDetection();
                            cooldownActive = false;
                        }
                    }, 3000);
                }
            } else {
                // Reset consecutive detections if no motion detected
                consecutiveDetections = 0;
                motionStatus.classList.remove('bg-warning');
                motionStatus.classList.add('bg-success');
                roiBox.classList.remove('motion-detected');
            }
            
            // Update referensi
            lastImageData = currentImageData;
        }

        // Bandingkan dua gambar dan hitung persentase perubahan
        function compareImages(img1, img2) {
            let diffCount = 0;
            const totalPixels = img1.length / 4; // 4 nilai per piksel (RGBA)
            
            // Bandingkan setiap piksel
            for (let i = 0; i < img1.length; i += 4) {
                // Hitung perbedaan untuk R, G, dan B
                const diffR = Math.abs(img1[i] - img2[i]);
                const diffG = Math.abs(img1[i+1] - img2[i+1]);
                const diffB = Math.abs(img1[i+2] - img2[i+2]);
                
                // Jika perbedaan melebihi threshold, hitung sebagai piksel yang berubah
                if (diffR > motionThreshold || diffG > motionThreshold || diffB > motionThreshold) {
                    diffCount++;
                }
            }
            
            // Hitung persentase perubahan
            return (diffCount / totalPixels) * 100;
        }

        // Capture photo
        function capturePhoto() {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0);
            base64Image.value = canvas.toDataURL('image/jpeg');
            
            submitBtn.disabled = false;

            Swal.fire({
                icon: 'success',
                title: 'Foto Berhasil',
                text: 'Foto kendaraan berhasil diambil otomatis',
                timer: 1500,
                showConfirmButton: false
            });
            
            // Highlight ROI area where motion was detected
            roiBox.classList.add('capture-highlight');
            setTimeout(() => {
                roiBox.classList.remove('capture-highlight');
            }, 1000);

            // Menampilkan gambar terakhir
            displayLastCapture(canvas.toDataURL('image/jpeg'));
        }

        // Fungsi untuk menampilkan gambar yang baru di-capture
        function displayLastCapture(imageData) {
            const lastCapture = document.getElementById('lastCapture');
            const noCaptureText = document.getElementById('noCaptureText');
            const captureInfo = document.querySelector('.capture-info');
            const captureTime = document.getElementById('captureTime');
            
            lastCapture.src = imageData;
            lastCapture.classList.remove('d-none');
            noCaptureText.classList.add('d-none');
            captureInfo.classList.remove('d-none');
            
            // Update waktu capture
            const now = new Date();
            captureTime.textContent = now.toLocaleString('id-ID');
            
            // Simpan data capture terakhir
            lastCaptureData = imageData;
        }

        // Capture photo button
        captureBtn.addEventListener('click', () => {
            captureBtn.disabled = true;
            capturePhoto();
            captureBtn.disabled = false;
        });

        // Handle form submission
        entryForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            loadingOverlay.style.display = 'block';
            const progressBar = loadingOverlay.querySelector('.progress-bar');
            progressBar.style.width = '0%';
            
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += 5;
                if (progress <= 90) {
                    progressBar.style.width = progress + '%';
                }
            }, 500);
            
            setTimeout(() => {
                timeoutText.style.display = 'block';
            }, 10000);
            
            try {
                const formData = new FormData(entryForm);
                const response = await fetch('/Gate/ProcessEntry', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                clearInterval(progressInterval);
                loadingOverlay.style.display = 'none';

                if (response.ok) {
                    if (result.success) {
                        Swal.fire({
                            title: 'Berhasil!',
                            text: result.message,
                            icon: 'success',
                            showConfirmButton: true
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            }
                        });
                    } else {
                        Swal.fire({
                            title: 'Gagal',
                            text: result.message,
                            icon: 'warning'
                        });
                    }
                } else {
                    throw new Error(result.message || 'Terjadi kesalahan saat memproses kendaraan');
                }
            } catch (error) {
                clearInterval(progressInterval);
                loadingOverlay.style.display = 'none';

                Swal.fire({
                    title: 'Error',
                    text: error.message || 'Terjadi kesalahan saat memproses kendaraan',
                    icon: 'error'
                });
            }
        });
    </script>
} 